#find the largest sum of a slice of an array
def max_slice(A):
    test=max_sum=max_slice=0
    if max(A)<=0:    
        test=max_slice=max(A)
    for a in A:     
        max_sum=max(test,max_sum+a)
        max_slice = max(max_sum,max_slice)
    return max_slice
    
A =[5,-7,3,5,-2,4,-1]
print "Largest sum of a slide: {}.".format(max_slice(A))

-------------------------------------------------------------------------------------------------------------------------

#Minimize the value |(A[0] + ... + A[P-1]) - (A[P] + ... + A[N-1])|.
#it gives the minimal absolute difference between the sum of the
#first part and the sum of the second part
#(this is not the perfect solution, but I made all alone)
def TapeEquilibrium(A):
    p=1
    ans = sum(A)
    if max(A)<0:
        ans=-sum(A)
    for item in list(A[1:len(A)]):
        if abs(sum(A[0:p])-sum(A[p:len(A)]))<ans:
            ans=abs(sum(A[0:p])-sum(A[p:len(A)]))
        p+=1
    return  ans

A = [-3, -1, -2, -4, -3]
print "minimal absolute difference: {}".format(TapeEquilibrium(A))

-------------------------------------------------------------------------------------------------------------------------

#Count minimal number of jumps from position X to Y.

def  FrogJmp(X, Y, D):
    import math
    return int(math.ceil((Y-X)/float(D)))
    
X,Y,D=10,85,30
print  "minimal number of jumps from position {} to {}, with jumps of {} : {}".format(X,Y,D,FrogJmp(X,Y,D))

-------------------------------------------------------------------------------------------------------------------------

#Find the missing element in a given permutation.
def PermMissingElem_slow(A):
    # write your code in Python 2.7
    for i in range(len(A)+1):
        if not(i+1 in A):
            break
    return i+1

def PermMissingElem(A):
    return sum(range(len(A)+2))-sum(A)

A=[1,2,4,5]
print "The missing element is: {}".format(PermMissingElem(A))

-------------------------------------------------------------------------------------------------------------------------
#This code gives the exact solution in all cases, but it is not the faste
#but I wrote all alone
#Minimize the value |(A[0] + ... + A[P-1]) - (A[P] + ... + A[N-1])|.
def TapeEquilibrium(A):
    ans=abs(A[0]- sum(A[1:len(A)]))
    for i in range(len(A)-1):
        ans = min(abs(sum(A[0:i+1])-sum(A[i+1:len(A)])),ans)
    return ans

A=[-3,1,2,4,3]           
print TapeEquilibrium(A) 

-------------------------------------------------------------------------------------------------------------------------
